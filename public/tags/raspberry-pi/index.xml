<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Raspberry Pi on Goosst blog</title>
    <link>http://users.telenet.be/goosst/tags/raspberry-pi/</link>
    <description>Recent content in Raspberry Pi on Goosst blog</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <copyright>This work is licensed under a Creative Commons Attribution-NonCommercial 4.0 International License.</copyright>
    <lastBuildDate>Mon, 22 Apr 2019 00:00:00 +0000</lastBuildDate>
    
	<atom:link href="http://users.telenet.be/goosst/tags/raspberry-pi/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>Heating automation - device tracking</title>
      <link>http://users.telenet.be/goosst/posts/homeautomation_partiiii/</link>
      <pubDate>Mon, 22 Apr 2019 00:00:00 +0000</pubDate>
      
      <guid>http://users.telenet.be/goosst/posts/homeautomation_partiiii/</guid>
      <description>Intro In this part we&amp;rsquo;ll turn our heating off when we leave the house (by detecting presence of our mobile phone).
Concept We&amp;rsquo;ll be checking if the mac-address of our phone is on the wifi network. Based on this we&amp;rsquo;ll do a simple scheduling of our heating.
Home assistant No python scripts this time, only activity is done in Home Assistant.
Device tracking Example below will use the component device_tracker and the nmap program to scan the network.</description>
    </item>
    
    <item>
      <title>Heating automation - read information</title>
      <link>http://users.telenet.be/goosst/posts/homeautomation_partiii/</link>
      <pubDate>Sun, 21 Apr 2019 00:00:00 +0000</pubDate>
      
      <guid>http://users.telenet.be/goosst/posts/homeautomation_partiii/</guid>
      <description>Intro In this part we&amp;rsquo;ll read commands through the interface of Home Assistant and plot them in the UI.
Concept We&amp;rsquo;ll be (mis)using the mqtt protocol to send messages from the ebusd program to Home Assistant (both running on the same raspberry). This sending of messages will be done in a python script.
Again: in this way we can focus on making all the ebus related items running in python and we don&amp;rsquo;t have to deal with a custom Home Assistant syntax.</description>
    </item>
    
    <item>
      <title>Heating automation - set temperatures</title>
      <link>http://users.telenet.be/goosst/posts/homeautomation_partii/</link>
      <pubDate>Sat, 20 Apr 2019 00:00:00 +0000</pubDate>
      
      <guid>http://users.telenet.be/goosst/posts/homeautomation_partii/</guid>
      <description>Intro In this part we&amp;rsquo;ll:
 install hassbian set our requested room temperature through the interface of Home Assistant.  Preparing the Raspberry pi There is hassbian, hass.io, homme-assistant itself, &amp;hellip; as you see, not confusing at all :). I&amp;rsquo;m using hassbian since at least I know ebusd works in a debian environment on the raspberry pi. I&amp;rsquo;m not familiar with docker (hass.io) and its limitations.
 Follow the Hassbian installation instructions: https://www.</description>
    </item>
    
    <item>
      <title>Heating automation - ebus</title>
      <link>http://users.telenet.be/goosst/posts/homeautomation_parti/</link>
      <pubDate>Fri, 19 Apr 2019 00:00:00 +0000</pubDate>
      
      <guid>http://users.telenet.be/goosst/posts/homeautomation_parti/</guid>
      <description>Intro In this part we&amp;rsquo;ll connect to the communication bus of the heater and read / write some parameters by manually commanding them via a rapsberry pi (in general, the instructions below work with any computer using debian/ubuntu).
Hardware Ebus adapter We need an ebus adapter for the raspberry to interface with our heater. I&amp;rsquo;m not going to write down all the details, since I can just refer to them:</description>
    </item>
    
  </channel>
</rss>