<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>ebus on Goosst blog</title>
    <link>http://users.telenet.be/goosst/tags/ebus/</link>
    <description>Recent content in ebus on Goosst blog</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <copyright>This work is licensed under a Creative Commons Attribution-NonCommercial 4.0 International License.</copyright>
    <lastBuildDate>Sat, 02 Nov 2019 00:00:00 +0000</lastBuildDate>
    
	<atom:link href="http://users.telenet.be/goosst/tags/ebus/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>Heating automation - laptop</title>
      <link>http://users.telenet.be/goosst/posts/hass_laptop/</link>
      <pubDate>Sat, 02 Nov 2019 00:00:00 +0000</pubDate>
      
      <guid>http://users.telenet.be/goosst/posts/hass_laptop/</guid>
      <description>Intro My singleboard computers (Raspberry 3b, tinkerboard) in combination with the ebus adapter didn&amp;rsquo;t turn out to be very reliable. I was not able to pinpoint the exact root cause (most likely some power/voltage related issues). But on my laptop everything seems to work quite stable&amp;hellip; .
This page is mainly to document the steps starting from a fresh linux install and setting up homeassistant and ebusd. It starts with a fresh install of the debian based crunchbangplusplus, here installed on an (old) laptop with i386 processor.</description>
    </item>
    
    <item>
      <title>Heating automation - device tracking</title>
      <link>http://users.telenet.be/goosst/posts/homeautomation_partiiii/</link>
      <pubDate>Mon, 22 Apr 2019 00:00:00 +0000</pubDate>
      
      <guid>http://users.telenet.be/goosst/posts/homeautomation_partiiii/</guid>
      <description>Intro In this part we&amp;rsquo;ll turn our heating off and on when we leave the house (by detecting presence of our mobile phone).
Concept We&amp;rsquo;ll be checking if the mac-address of our phone is on the wifi network. Based on this we&amp;rsquo;ll do a simple scheduling of our heating.
Home assistant No python scripts this time, only activity is done in Home Assistant.
Device tracking Example below will use the component device_tracker and the nmap program to scan the network.</description>
    </item>
    
    <item>
      <title>Heating automation - read information</title>
      <link>http://users.telenet.be/goosst/posts/homeautomation_partiii/</link>
      <pubDate>Sun, 21 Apr 2019 00:00:00 +0000</pubDate>
      
      <guid>http://users.telenet.be/goosst/posts/homeautomation_partiii/</guid>
      <description>Intro In this part we&amp;rsquo;ll read parameters from our heater through the interface of Home Assistant and plot them in the UI.
Concept We&amp;rsquo;ll be (mis)using the mqtt protocol to send messages from the ebusd program to Home Assistant (both running on the same raspberry). This sending of messages will be done in a python script.
Again: in this way we can focus on making all the ebus related items running in python and we don&amp;rsquo;t have to deal with a custom Home Assistant syntax.</description>
    </item>
    
    <item>
      <title>Heating automation - set temperatures</title>
      <link>http://users.telenet.be/goosst/posts/homeautomation_partii/</link>
      <pubDate>Sat, 20 Apr 2019 00:00:00 +0000</pubDate>
      
      <guid>http://users.telenet.be/goosst/posts/homeautomation_partii/</guid>
      <description>Intro In this part we&amp;rsquo;ll:
 install hassbian set our requested room temperature through the interface of Home Assistant.  Preparing the Raspberry pi There is hassbian, hass.io, homme-assistant itself, &amp;hellip; as you see, not confusing at all :). I&amp;rsquo;m using hassbian since at least I know ebusd works in a debian environment on the raspberry pi. I&amp;rsquo;m not familiar with docker (hass.io) and its limitations.
 Follow the Hassbian installation instructions: https://www.</description>
    </item>
    
    <item>
      <title>Heating automation - setup hardware and ebus</title>
      <link>http://users.telenet.be/goosst/posts/homeautomation_parti/</link>
      <pubDate>Fri, 19 Apr 2019 00:00:00 +0000</pubDate>
      
      <guid>http://users.telenet.be/goosst/posts/homeautomation_parti/</guid>
      <description>Intro In this part we&amp;rsquo;ll connect to the communication bus of the heater and read / write some parameters by manually commanding them via a raspberry pi (in general, the instructions below work with any computer using debian/ubuntu).
Hardware Ebus adapter We need an ebus adapter for the raspberry to interface with our heater. I&amp;rsquo;m not going to write down all the details, since I can just refer to them:</description>
    </item>
    
    <item>
      <title>Heating automation - intro</title>
      <link>http://users.telenet.be/goosst/posts/homeautomation_intro/</link>
      <pubDate>Thu, 18 Apr 2019 00:00:00 +0000</pubDate>
      
      <guid>http://users.telenet.be/goosst/posts/homeautomation_intro/</guid>
      <description>Intro I think we all want a more intelligent control over our heaters than what the standard thermostats have to offer. e.g. Automatically turning the heating off when leaving your home, scheduling the heater to turn on sooner in the morning when it&amp;rsquo;s cold, &amp;hellip; .
Disregarding privacy concerns, commercial solutions like Google Nest only seem to support on/off control of the heating. If we want to use proportional/modulated heating for more comfort, at the time of writing the amount of solutions seems very limited.</description>
    </item>
    
  </channel>
</rss>